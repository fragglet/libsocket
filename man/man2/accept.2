.\" Copyright (c) 1983, 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)accept.2	6.6 (Berkeley) 4/29/91
.\"
.\" Modified Sat Jul 24 16:42:42 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH ACCEPT 2 "24 July 1993" "BSD Man Page" "Linux Programmer's Manual"
.SH NAME
accept \- accept a connection on a socket
.SH SYNOPSIS
.B #include <sys/types.h>
.sp
.B #include <sys/socket.h>
.sp
.BI "int accept(int " s ", struct sockaddr *" addr ", int *" addrlen );
.SH DESCRIPTION
The argument
.I s
is a socket that has been created with
.BR socket (2),
bound to an address with
.BR bind (2),
and is listening for connections after a
.BR listen (2).
The
.B accept
function extracts the first connection request on the queue of pending
connections, creates a new socket with the same properties of
.I s
and allocates a new file descriptor for the socket.  If no pending
connections are present on the queue, and the socket is not marked as
non-blocking,
.B accept
blocks the caller until a connection is present.  If the socket is marked
non-blocking and no pending connections are present on the queue,
.B accept
returns an error as described below.  The accepted socket may not be used
to accept more connections.  The original socket
.I s
remains open.

The argument
.I addr
is a result parameter that is filled in with the address of the connecting
entity, as known to the communications layer.  The exact format of the
.I addr
parameter is determined by the domain in which the communication is
occurring.  The
.I addrlen
is a value-result parameter; it should initially contain the
amount of space pointed to by
.IR addr ;
on return it will contain the actual length (in bytes) of the address
returned.  This call is used with connection-based socket types, currently
with
.BR SOCK_STREAM . 

It is possible to
.BR select (2)
a socket for the purposes of doing an
.B accept
by selecting it for read.

For certain protocols which require an explicit confirmation,
such as
.B ISO
or
.BR DATAKIT ,
.B accept
can be thought of as merely dequeuing the next connection request and not
implying confirmation.  Confirmation can be implied by a normal read or
write on the new file descriptor, and rejection can be implied by closing
the new socket.

One can obtain user connection request data without confirming
the connection by issuing a 
.BR recvmsg (2)
call with an
.I msg_iovlen
of 0 and a non-zero
.IR msg_controllen ,
or by issuing a
.BR getsockopt (2)
request.  Similarly, one can provide user connection rejection information
by issuing a
.BR sendmsg (2)
call with providing only the control information,
or by calling
.BR setsockopt (2).
.SH "RETURN VALUES"
The call returns \-1 on error.  If it succeeds, it returns a non-negative
integer that is a descriptor for the accepted socket.
.SH ERRORS
.TP
.B EBADF
The descriptor is invalid.
.TP
.B ENOTSOCK
The descriptor references a file, not a socket.
.TP
.B EOPNOTSUPP
The referenced socket is not of type
.BR SOCK_STREAM . 
.TP
.B EFAULT
The
.I addr
parameter is not in a writable part of the user address space.
.TP
.B EWOULDBLOCK
The socket is marked non-blocking and no connections are
present to be accepted.
.SH CONFORMING TO
SVr4, 4.4BSD (the
.B accept
function first appeared in BSD 4.2).  SVr4 documents an additional
EOPNOTSUPP error condition.
.SH "SEE ALSO"
.BR bind "(2), " connect "(2), " listen "(2), " select "(2), " socket (2)
