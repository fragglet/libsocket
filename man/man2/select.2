.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is copyright (C) 1992 Drew Eckhardt,
.\"                 copyright (C) 1995 Michael Shields.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-05-18 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Sun Feb 11 14:07:00 MET 1996  Martin Schulze  <joey@linux.de>
.\"	* layout slightly modified
.\"
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH SELECT 2 "February 11, 1996" "Linux 1.2" "Linux Programmer's Manual"
.SH NAME
select, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \- synchronous I/O multiplexing
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
\fBint select(int \fIn\fB, fd_set *\fIreadfds\fB,
fd_set *\fIwritefds\fB, fd_set *\fIexceptfds\fB,
struct timeval *\fItimeout\fB);
.sp
.BI "FD_CLR(int " fd ", fd_set *" set );
.br
.BI "FD_ISSET(int " fd ", fd_set *" set );
.br
.BI "FD_SET(int " fd ", fd_set *" set );
.br
.BI "FD_ZERO(fd_set *" set );
.fi
.SH DESCRIPTION
.B select
waits for a number of file descriptors to change status.
.PP
Three independent sets of descriptors are watched.  Those listed in
.I readfds
will be watched to see if characters become
available for reading, those in
.I writefds
will be watched to see if it is ok to immediately write on them, and
those in
.I exceptfds
will be watched for exceptions.  On exit, the sets are modified in place
to indicate which descriptors actually changed status.
.PP
Four macros are provided to manipulate the sets.
.B FD_ZERO
will clear a set.
.B FD_SET
and
.B FD_CLR
add or remove a given descriptor from a set.
.B FD_ISSET
tests to see if a descriptor is part of the set; this is useful after
.B select
returns.
.PP
.I n
is the highest-numbered descriptor in any of the three sets, plus 1.
.PP
.I timeout
is an upper bound on the amount of time elapsed before
.B select
returns.  It may be zero, causing
.B select
to return immediately.  If
.I timeout
is NULL (no timeout),
.B select
can block indefinitely.
.SH RETURN VALUE
On success,
.B select 
returns the number of descriptors contained in the descriptor sets, which
may be zero if the timeout expires before anything interesting happens.
On error, \-1 is returned, and
.I errno
is set appropriately; the sets and
.I timeout
become undefined, so do not
rely on their contents after an error.
.SH ERRORS
.TP 0.8i
.B EBADF
An invalid file descriptor was given in one of the sets.
.TP
.B EINTR 
A non blocked signal was caught.
.TP
.B EINVAL 
.I n
is negative.
.TP
.B ENOMEM
.B select
was unable to allocate memory for internal tables.
.SH NOTES
Some code calls
.B select
with all three sets empty,
.I n
zero, and a non-null
.I timeout
as a fairly portable way to sleep with subsecond precision.
.PP
On Linux,
.I timeout
is modified to reflect the amount of time not slept; most other
implementations do not do this.  This causes problems both when Linux
code which reads
.I timeout
is ported to other operating systems, and when code is ported to Linux
that reuses a struct timeval for multiple
.BR select s
in a loop without reinitializing it.  Consider
.I timeout
to be undefined after
.B select
returns.
.SH EXAMPLE
.nf
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int
main(void)
{
    fd_set rfds;
    struct timeval tv;
    int retval;

    /* Watch stdin (fd 0) to see when it has input. */
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);
    /* Wait up to five seconds. */
    tv.tv_sec = 5;
    tv.tv_usec = 0;

    retval = select(1, &rfds, NULL, NULL, &tv);
    /* Don't rely on the value of tv now! */

    if (retval)
        printf("Data is available now.\\n");
        /* FD_ISSET(0, &rfds) will be true. */
    else
        printf("No data within five seconds.\\n");

    exit(0);
}
.fi
.SH CONFORMING TO
4.4BSD (the
.B select
function first appeared in 4.2BSD).  Generally portable to/from
non-BSD systems supporting clones of the BSD socket layer (including
System V variants).  However, note that the System V variant typically
sets the timeout variable before exit, but the BSD variant does not.
.SH SEE ALSO
.BR accept (2),
.BR connect (2),
.BR read (2),
.BR recv (2),
.BR send (2),
.BR write (2).
