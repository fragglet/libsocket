.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)socket.2	6.8 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 10:36:46 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 22:10:43 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"
.TH SOCKET 2 "24 July 1993" "BSD Man Page" "Linux Programmer's Manual"
.SH NAME
socket \- create an endpoint for communication
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/socket.h>
.sp
.BI "int socket(int " domain ", int " type ", int " protocol );
.SH DESCRIPTION
.B Socket
creates an endpoint for communication and returns a descriptor.

The
.I domain
parameter specifies a communications domain within which communication will
take place; this selects the protocol family which should be used.  These
families are defined in the include file
.IR sys/socket.h .
The currently understood formats are

.RS
.TP 0.9i
AF_UNIX
(UNIX internal protocols)
.TP
AF_INET
(ARPA Internet protocols)
.TP
AF_ISO
(ISO protocols)
.TP
AF_NS
(Xerox Network Systems protocols)
.TP
AF_IMPLINK
(IMP \*(lqhost at IMP\*(rq link layer)
.RE

The socket has the indicated
.IR type ,
which specifies the semantics of communication.  Currently defined types
are:

.RS
.nf
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
.fi
.RE

A
.B SOCK_STREAM
type provides sequenced, reliable, two-way connection based byte streams.
An out-of-band data transmission mechanism may be supported.  A
.B SOCK_DGRAM
socket supports datagrams (connectionless, unreliable messages of a fixed
(typically small) maximum length).  A
.B SOCK_SEQPACKET
socket may provide a sequenced, reliable, two-way connection-based data
transmission path for datagrams of fixed maximum length; a consumer may be
required to read an entire packet with each read system call.  This
facility is protocol specific, and presently implemented only for
.BR AF_NS .
.B SOCK_RAW
sockets provide access to internal network protocols and interfaces.  The
types
.BR SOCK_RAW ,
which is available only to the super-user, and
.BR SOCK_RDM ,
which is planned, but not yet implemented, are not described here.

The
.I protocol
specifies a particular protocol to be used with the socket.  Normally only
a single protocol exists to support a particular socket type within a given
protocol family.  However, it is possible that many protocols may exist, in
which case a particular protocol must be specified in this manner.  The
protocol number to use is particular to the \*(lqcommunication domain\*(rq
in which communication is to take place; see
.BR protocols (5).

Sockets of type
.B SOCK_STREAM
are full-duplex byte streams, similar to pipes.  A stream socket must be in
a
.I connected
state before any data may be sent or received on it.  A connection to
another socket is created with a
.BR connect (2)
call.  Once connected, data may be transferred using
.BR read (2)
and
.BR write (2)
calls or some variant of the 
.BR send (2)
and
.BR recv (2)
calls.  When a session has been completed a
.BR close (2)
may be performed.  Out-of-band data may also be transmitted as described in
.BR send (2)
and received as described in
.BR recv (2).

The communications protocols used to implement a
.B SOCK_STREAM
insure that data is not lost or duplicated.  If a piece of data for which
the peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then the connection is considered
broken and calls will indicate an error with \-1 returns and with
.B ETIMEDOUT
as the specific code in the global variable
.IR errno .
The protocols optionally keep sockets
.I warm
by forcing transmissions roughly every minute in the absence of other
activity.  An error is then indicated if no response can be elicited on an
otherwise idle connection for a extended period (e.g. 5 minutes).  A
.B SIGPIPE
signal is raised if a process sends
on a broken stream; this causes naive processes,
which do not handle the signal, to exit.

.B SOCK_SEQPACKET
sockets employ the same system calls as
.B SOCK_STREAM
sockets.  The only difference is that
.BR read (2)
calls will return only the amount of data requested, and any remaining in
the arriving packet will be discarded.

.B SOCK_DGRAM
and
.B SOCK_RAW
sockets allow sending of datagrams to correspondents named in
.BR send (2)
calls.  Datagrams are generally received with
.BR recvfrom (2),
which returns the next datagram with its return address.

An 
.BR fcntl (2)
call can be used to specify a process group to receive a
.B SIGURG
signal when the out-of-band data arrives.  It may also enable non-blocking
I/O and asynchronous notification of I/O events via
.BR SIGIO .

The operation of sockets is controlled by socket level
.IR options .
These options are defined in the file
.IR sys/socket.h .
.BR Setsockopt (2)
and
.BR getsockopt (2)
are used to set and get options, respectively.
.SH "RETURN VALUES"
A \-1 is returned if an error occurs, otherwise the return value is a
descriptor referencing the socket.
.SH ERRORS
.TP 0.8i
.B EPROTONOSUPPORT
The protocol type or the specified protocol is not
supported within this domain.
.TP
.B EMFILE
The per-process descriptor table is full.
.TP
.B ENFILE
The system file table is full.
.TP
.B EACCES
Permission to create a socket of the specified type and/or protocol
is denied.
.TP
.B ENOBUFS
Insufficient buffer space is available.  The socket cannot be
created until sufficient resources are freed.
.SH "CONFORMING TO"
4.4BSD (the
.B socket
function call appeared in 4.2BSD). Generally portable to/from
non-BSD systems supporting clones of the BSD socket layer (including
System V variants).
.SH "SEE ALSO"
.BR accept "(2), " bind "(2), " connect "(2), " getprotoent "(3), "
.BR getsockname "(2), " getsockopt "(2), " ioctl "(2), " listen "(2), "
.BR read "(2), " recv "(2), " select "(2), " send "(2), " shutdown "(2), "
.BR socketpair "(2), " write (2)
.sp
"An Introductory 4.3 BSD Interprocess Communication Tutorial"
is reprinted in
.I UNIX Programmer's Supplementary Documents Volume 1
.sp
"BSD Interprocess Communication Tutorial"
is reprinted in
.I UNIX Programmer's Supplementary Documents Volume 1
